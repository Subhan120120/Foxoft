// <auto-generated />
using System;
using Foxoft.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foxoft.Migrations
{
    [DbContext(typeof(subContext))]
    partial class subContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Foxoft.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoSave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("DueDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GetPrint")
                        .HasColumnType("bit");

                    b.Property<string>("GridViewLayout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalCurrencyCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PrintDesignPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrinterCopyNum")
                        .HasColumnType("int");

                    b.Property<string>("PrinterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwilioInstanceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwilioToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UsePriceList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("LocalCurrencyCode")
                        .IsUnique()
                        .HasFilter("[LocalCurrencyCode] IS NOT NULL");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AutoSave = false,
                            GetPrint = false,
                            GridViewLayout = "<XtraSerializer version=\"1.0\" application=\"View\">\n	<property name=\"#LayoutVersion\" />\n	<property name=\"#LayoutScaleFactor\">@1,Width=1@1,Height=1</property>\n	<property name=\"Appearance\" isnull=\"true\" iskey=\"true\">\n		<property name=\"Row\" iskey=\"true\" value=\"Row\">\n			<property name=\"Options\" isnull=\"true\" iskey=\"true\">\n				<property name=\"UseFont\">true</property>\n			</property>\n			<property name=\"Font\">Tahoma, 12pt</property>\n		</property>\n		<property name=\"FooterPanel\" iskey=\"true\" value=\"FooterPanel\">\n			<property name=\"Options\" isnull=\"true\" iskey=\"true\">\n				<property name=\"UseFont\">true</property>\n			</property>\n			<property name=\"Font\">Tahoma, 12pt</property>\n		</property>\n	</property>\n	<property name=\"OptionsBehavior\" isnull=\"true\" iskey=\"true\">\n		<property name=\"Editable\">false</property>\n		<property name=\"ReadOnly\">true</property>\n	</property>\n	<property name=\"OptionsCustomization\" isnull=\"true\" iskey=\"true\">\n		<property name=\"AllowRowSizing\">true</property>\n	</property>\n	<property name=\"OptionsView\" isnull=\"true\" iskey=\"true\">\n		<property name=\"ColumnHeaderAutoHeight\">True</property>\n		<property name=\"ShowAutoFilterRow\">true</property>\n		<property name=\"ShowGroupPanel\">false</property>\n		<property name=\"ShowIndicator\">false</property>\n	</property>\n	<property name=\"OptionsFind\" isnull=\"true\" iskey=\"true\">\n		<property name=\"FindMode\">Always</property>\n		<property name=\"FindDelay\">100</property>\n	</property>\n	<property name=\"FixedLineWidth\">2</property>\n	<property name=\"IndicatorWidth\">-1</property>\n	<property name=\"ColumnPanelRowHeight\">-1</property>\n	<property name=\"RowSeparatorHeight\">0</property>\n	<property name=\"FooterPanelHeight\">-1</property>\n	<property name=\"HorzScrollVisibility\">Auto</property>\n	<property name=\"VertScrollVisibility\">Auto</property>\n	<property name=\"RowHeight\">-1</property>\n	<property name=\"GroupRowHeight\">-1</property>\n	<property name=\"GroupFormat\">{0}: [#image]{1} {2}</property>\n	<property name=\"ChildGridLevelName\" />\n	<property name=\"VertScrollTipFieldName\" />\n	<property name=\"PreviewFieldName\" />\n	<property name=\"GroupPanelText\" />\n	<property name=\"NewItemRowText\" />\n	<property name=\"LevelIndent\">-1</property>\n	<property name=\"PreviewIndent\">-1</property>\n	<property name=\"PreviewLineCount\">-1</property>\n	<property name=\"ScrollStyle\">LiveVertScroll, LiveHorzScroll</property>\n	<property name=\"FocusRectStyle\">CellFocus</property>\n	<property name=\"HorzScrollStep\">0</property>\n	<property name=\"ActiveFilterEnabled\">true</property>\n	<property name=\"ViewCaptionHeight\">-1</property>\n	<property name=\"Columns\" iskey=\"true\" value=\"0\" />\n	<property name=\"ViewCaption\" />\n	<property name=\"BorderStyle\">Default</property>\n	<property name=\"SynchronizeClones\">true</property>\n	<property name=\"DetailTabHeaderLocation\">Top</property>\n	<property name=\"Name\">gridView1</property>\n	<property name=\"DetailHeight\">350</property>\n	<property name=\"Tag\" isnull=\"true\" />\n	<property name=\"GroupSummary\" iskey=\"true\" value=\"0\" />\n	<property name=\"ActiveFilterString\" />\n	<property name=\"FormatRules\" iskey=\"true\" value=\"0\" />\n	<property name=\"FormatConditions\" iskey=\"true\" value=\"0\" />\n	<property name=\"GroupSummarySortInfoState\" />\n	<property name=\"FindFilterText\" />\n	<property name=\"FindPanelVisible\">true</property>\n</XtraSerializer>",
                            PrinterCopyNum = 0,
                            UsePriceList = false
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcBarcodeType", b =>
                {
                    b.Property<string>("BarcodeTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BarcodeTypeDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BarcodeTypeCode");

                    b.ToTable("DcBarcodeTypes");

                    b.HasData(
                        new
                        {
                            BarcodeTypeCode = "Serbest",
                            BarcodeTypeDesc = "Sərbəst"
                        },
                        new
                        {
                            BarcodeTypeCode = "EAN13",
                            BarcodeTypeDesc = "EAN13"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcClaim", b =>
                {
                    b.Property<string>("ClaimCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ClaimTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("ClaimCode");

                    b.HasIndex("ClaimTypeId");

                    b.ToTable("DcClaims");

                    b.HasData(
                        new
                        {
                            ClaimCode = "ButunHesabatlar",
                            ClaimDesc = "Butun Hesabatlar",
                            ClaimTypeId = (byte)2
                        },
                        new
                        {
                            ClaimCode = "CashRegs",
                            ClaimDesc = "Kassalar",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "CashTransfer",
                            ClaimDesc = "Pul Transferi",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "Column_ProductCost",
                            ClaimDesc = "Son Alış Qiyməti",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "CountIn",
                            ClaimDesc = "Sayım Artırma",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "CountOut",
                            ClaimDesc = "Sayım Azaltma",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "CurrAccs",
                            ClaimDesc = "Cari Hesablar",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "DiscountList",
                            ClaimDesc = "Endirim Siyahısı",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "Expense",
                            ClaimDesc = "Xərc",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "InventoryTransfer",
                            ClaimDesc = "Mal Transferi",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "PaymentDetail",
                            ClaimDesc = "Ödəmə",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "PosDiscount",
                            ClaimDesc = "POS Endirimi",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "PriceList",
                            ClaimDesc = "Qiymət Cədvəli",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "Products",
                            ClaimDesc = "Məhsullar",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "ReportZet",
                            ClaimDesc = "Gün Sonu Hesabatı",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "RetailPurchaseInvoice",
                            ClaimDesc = "Alış Fakturası",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "RetailSaleInvoice",
                            ClaimDesc = "Satış Fakturası",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "WholesaleInvoice",
                            ClaimDesc = "Topdan Satışın Qaytarılması",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "RetailPurchaseReturn",
                            ClaimDesc = "Alışın Qaytarılması",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "RetailSaleReturn",
                            ClaimDesc = "Satışın Qaytarılması",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "WholesaleReturn",
                            ClaimDesc = "Topdan Satışın Qaytarılması",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "ProductFeatureType",
                            ClaimDesc = "Məhsul Özəlliyi",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "HierarchyFeatureType",
                            ClaimDesc = "Özəlliyi İyerarxiyaya Bağlama",
                            ClaimTypeId = (byte)1
                        },
                        new
                        {
                            ClaimCode = "Session",
                            ClaimDesc = "Özəlliyi İyerarxiyaya Bağlama",
                            ClaimTypeId = (byte)1
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcCurrAcc", b =>
                {
                    b.Property<string>("CurrAccCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("'1901-01-01'");

                    b.Property<string>("BonusCardNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("CashRegPaymentTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<decimal>("CreditLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0");

                    b.Property<string>("CurrAccDesc")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte>("CurrAccTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<double>("CustomerPosDiscountRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("CustomerTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("DataLanguageCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("IdentityNum")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsVip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsVIP")
                        .HasDefaultValueSql("0");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("NewPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PhoneNum")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TaxNum")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("VendorTypeCode")
                        .HasColumnType("tinyint");

                    b.HasKey("CurrAccCode");

                    b.HasIndex("CashRegPaymentTypeCode");

                    b.HasIndex("CurrAccTypeCode");

                    b.ToTable("DcCurrAccs");

                    b.HasData(
                        new
                        {
                            CurrAccCode = "C-000001",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CurrAccDesc = "Administrator",
                            CurrAccTypeCode = (byte)3,
                            CustomerPosDiscountRate = 0.0,
                            IsDefault = false,
                            IsDisabled = false,
                            IsVip = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NewPassword = "123",
                            OfficeCode = "ofs01",
                            PhoneNum = "0519678909",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01"
                        },
                        new
                        {
                            CurrAccCode = "C-000002",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CurrAccDesc = "Mudir",
                            CurrAccTypeCode = (byte)3,
                            CustomerPosDiscountRate = 0.0,
                            IsDefault = false,
                            IsDisabled = false,
                            IsVip = false,
                            LastName = "Mudir",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NewPassword = "123",
                            OfficeCode = "ofs01",
                            PhoneNum = "0519678909",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01"
                        },
                        new
                        {
                            CurrAccCode = "C-000003",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CurrAccDesc = "Operator",
                            CurrAccTypeCode = (byte)3,
                            CustomerPosDiscountRate = 0.0,
                            IsDefault = false,
                            IsDisabled = false,
                            IsVip = false,
                            LastName = "Operator",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NewPassword = "123",
                            OfficeCode = "ofs01",
                            PhoneNum = "0773628800",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01"
                        },
                        new
                        {
                            CurrAccCode = "C-000004",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CurrAccDesc = "Satici",
                            CurrAccTypeCode = (byte)3,
                            CustomerPosDiscountRate = 0.0,
                            IsDefault = false,
                            IsDisabled = false,
                            IsVip = false,
                            LastName = "Satici",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NewPassword = "123",
                            OfficeCode = "ofs01",
                            PhoneNum = "0553628804",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01"
                        },
                        new
                        {
                            CurrAccCode = "C-000005",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CurrAccDesc = "Ümumi Müştəri",
                            CurrAccTypeCode = (byte)1,
                            CustomerPosDiscountRate = 0.0,
                            IsDefault = true,
                            IsDisabled = false,
                            IsVip = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NewPassword = "123",
                            OfficeCode = "ofs01",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01"
                        },
                        new
                        {
                            CurrAccCode = "mgz01",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CurrAccDesc = "Merkez Mağaza",
                            CurrAccTypeCode = (byte)4,
                            CustomerPosDiscountRate = 0.0,
                            IsDefault = false,
                            IsDisabled = false,
                            IsVip = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NewPassword = "456",
                            OfficeCode = "ofs01",
                            PhoneNum = "0773628800",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01"
                        },
                        new
                        {
                            CurrAccCode = "kassa01",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CurrAccDesc = "Nağd Kassa",
                            CurrAccTypeCode = (byte)5,
                            CustomerPosDiscountRate = 0.0,
                            IsDefault = true,
                            IsDisabled = false,
                            IsVip = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NewPassword = "456",
                            OfficeCode = "ofs01",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcCurrAccType", b =>
                {
                    b.Property<byte>("CurrAccTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("CurrAccTypeDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurrAccTypeCode");

                    b.ToTable("DcCurrAccTypes");

                    b.HasData(
                        new
                        {
                            CurrAccTypeCode = (byte)1,
                            CurrAccTypeDesc = "Müştəri",
                            IsDisabled = false,
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CurrAccTypeCode = (byte)2,
                            CurrAccTypeDesc = "Tədarikçi",
                            IsDisabled = false,
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CurrAccTypeCode = (byte)3,
                            CurrAccTypeDesc = "Personal",
                            IsDisabled = false,
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CurrAccTypeCode = (byte)4,
                            CurrAccTypeDesc = "Mağaza",
                            IsDisabled = false,
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CurrAccTypeCode = (byte)5,
                            CurrAccTypeDesc = "Kassa",
                            IsDisabled = false,
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcCurrency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrencyDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ExchangeRate")
                        .HasColumnType("real");

                    b.HasKey("CurrencyCode");

                    b.ToTable("DcCurrencies");

                    b.HasData(
                        new
                        {
                            CurrencyCode = "AZN",
                            CurrencyDesc = "₼ AZN",
                            ExchangeRate = 1f
                        },
                        new
                        {
                            CurrencyCode = "USD",
                            CurrencyDesc = "$ DOLLAR",
                            ExchangeRate = 1.7f
                        },
                        new
                        {
                            CurrencyCode = "EUR",
                            CurrencyDesc = "€ EURO",
                            ExchangeRate = 1.67f
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("DiscountDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.HasKey("DiscountId");

                    b.ToTable("DcDiscounts");
                });

            modelBuilder.Entity("Foxoft.Models.DcFeature", b =>
                {
                    b.Property<string>("FeatureCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("FeatureTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("FeatureDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureCode", "FeatureTypeId");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("DcFeatures");
                });

            modelBuilder.Entity("Foxoft.Models.DcFeatureType", b =>
                {
                    b.Property<int>("FeatureTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureTypeId"));

                    b.Property<string>("FeatureTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Filterable")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("FeatureTypeId");

                    b.ToTable("DcFeatureTypes");
                });

            modelBuilder.Entity("Foxoft.Models.DcForm", b =>
                {
                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FormDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormCode");

                    b.ToTable("DcForms");

                    b.HasData(
                        new
                        {
                            FormCode = "CurrAccs",
                            FormDesc = "CurrAccs"
                        },
                        new
                        {
                            FormCode = "Products",
                            FormDesc = "Products"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcHierarchy", b =>
                {
                    b.Property<string>("HierarchyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("HierarchyDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int");

                    b.Property<string>("HierarchyParentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("HierarchyCode");

                    b.ToTable("DcHierarchies");

                    b.HasData(
                        new
                        {
                            HierarchyCode = "Root",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HierarchyDesc = "Root",
                            HierarchyLevel = 0,
                            Id = 0,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 0
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcOffice", b =>
                {
                    b.Property<string>("OfficeCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<decimal>("CompanyCode")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("OfficeDesc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OfficeCode");

                    b.ToTable("DcOffices");

                    b.HasData(
                        new
                        {
                            OfficeCode = "ofs01",
                            CompanyCode = 0m,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeDesc = "Mərkəz Ofisi",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcPaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("DefaultCashRegCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PaymentMethodDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("PaymentTypeCode")
                        .HasColumnType("tinyint");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("DefaultCashRegCode");

                    b.HasIndex("PaymentTypeCode");

                    b.ToTable("DcPaymentMethods");

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            PaymentMethodDesc = "Nağd",
                            PaymentTypeCode = (byte)1
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            PaymentMethodDesc = "Çatdırılma zamanı nağd ödə",
                            PaymentTypeCode = (byte)1
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            PaymentMethodDesc = "Saytda nağd ödə",
                            PaymentTypeCode = (byte)2
                        },
                        new
                        {
                            PaymentMethodId = 4,
                            PaymentMethodDesc = "Bir Kart",
                            PaymentTypeCode = (byte)2
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcPaymentType", b =>
                {
                    b.Property<byte>("PaymentTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("PaymentTypeDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentTypeCode");

                    b.ToTable("DcPaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeCode = (byte)1,
                            PaymentTypeDesc = "Nağd"
                        },
                        new
                        {
                            PaymentTypeCode = (byte)2,
                            PaymentTypeDesc = "Nağdsız"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcPriceType", b =>
                {
                    b.Property<string>("PriceTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PriceTypeDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PriceTypeCode");

                    b.ToTable("DcPriceTypes");

                    b.HasData(
                        new
                        {
                            PriceTypeCode = "STD",
                            PriceTypeDesc = "Standart"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcProcess", b =>
                {
                    b.Property<string>("ProcessCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CustomCurrencyCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProcessDesc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("ProcessDir")
                        .HasMaxLength(150)
                        .HasColumnType("tinyint");

                    b.HasKey("ProcessCode");

                    b.HasIndex("CustomCurrencyCode");

                    b.ToTable("DcProcesses");

                    b.HasData(
                        new
                        {
                            ProcessCode = "RP",
                            ProcessDesc = "Alış",
                            ProcessDir = (byte)1
                        },
                        new
                        {
                            ProcessCode = "RS",
                            ProcessDesc = "Satış",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "RPO",
                            ProcessDesc = "Alış Sifarişi",
                            ProcessDir = (byte)1
                        },
                        new
                        {
                            ProcessCode = "RSO",
                            ProcessDesc = "Satış Sifarişi",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "PA",
                            ProcessDesc = "Ödəmə",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "SB",
                            ProcessDesc = "Toptan Alış",
                            ProcessDir = (byte)1
                        },
                        new
                        {
                            ProcessCode = "WS",
                            ProcessDesc = "Toptan Satış",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "SBO",
                            ProcessDesc = "Toptan Alış Sifarişi",
                            ProcessDir = (byte)1
                        },
                        new
                        {
                            ProcessCode = "WSO",
                            ProcessDesc = "Toptan Satış Sifarişi",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "EX",
                            ProcessDesc = "Xərc",
                            ProcessDir = (byte)1
                        },
                        new
                        {
                            ProcessCode = "PE",
                            ProcessDesc = "Dovr",
                            ProcessDir = (byte)1
                        },
                        new
                        {
                            ProcessCode = "CI",
                            ProcessDesc = "Sayım Artırma",
                            ProcessDir = (byte)1
                        },
                        new
                        {
                            ProcessCode = "CO",
                            ProcessDesc = "Sayım Azaltma",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "TF",
                            ProcessDesc = "Transfer",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "IT",
                            ProcessDesc = "Mal Transferi",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "CT",
                            ProcessDesc = "Pul Transferi",
                            ProcessDir = (byte)2
                        },
                        new
                        {
                            ProcessCode = "PL",
                            ProcessDesc = "Qiymət Cədvəli",
                            ProcessDir = (byte)0
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcProduct", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("HierarchyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<double>("PosDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ProductCode2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDesc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProductFeature")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("ProductTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("PromotionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PromotionCode2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PurchasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("RetailPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("0");

                    b.Property<double>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("UseInternet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("UsePos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<decimal>("WholesalePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("0");

                    b.HasKey("ProductCode");

                    b.HasIndex("HierarchyCode");

                    b.HasIndex("ProductTypeCode");

                    b.ToTable("DcProducts");

                    b.HasData(
                        new
                        {
                            ProductCode = "test01",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosDiscount = 0.0,
                            ProductDesc = "Test Məhsul 01",
                            ProductTypeCode = (byte)1,
                            PurchasePrice = 0m,
                            RetailPrice = 4.5m,
                            TaxRate = 0.0,
                            UseInternet = false,
                            UsePos = false,
                            WholesalePrice = 0m
                        },
                        new
                        {
                            ProductCode = "test02",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosDiscount = 0.0,
                            ProductDesc = "Test Məhsul 01",
                            ProductTypeCode = (byte)1,
                            PurchasePrice = 0m,
                            RetailPrice = 2.5m,
                            TaxRate = 0.0,
                            UseInternet = false,
                            UsePos = false,
                            WholesalePrice = 0m
                        },
                        new
                        {
                            ProductCode = "xerc01",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosDiscount = 0.0,
                            ProductDesc = "Yol Xərci",
                            ProductTypeCode = (byte)2,
                            PurchasePrice = 0m,
                            RetailPrice = 0m,
                            TaxRate = 0.0,
                            UseInternet = false,
                            UsePos = false,
                            WholesalePrice = 0m
                        },
                        new
                        {
                            ProductCode = "xerc02",
                            CreatedDate = new DateTime(1901, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosDiscount = 0.0,
                            ProductDesc = "İşıq Pulu",
                            ProductTypeCode = (byte)2,
                            PurchasePrice = 0m,
                            RetailPrice = 0m,
                            TaxRate = 0.0,
                            UseInternet = false,
                            UsePos = false,
                            WholesalePrice = 0m
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcProductType", b =>
                {
                    b.Property<byte>("ProductTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProductTypeDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductTypeCode");

                    b.ToTable("DcProductTypes");

                    b.HasData(
                        new
                        {
                            ProductTypeCode = (byte)1,
                            ProductTypeDesc = "Məhsul"
                        },
                        new
                        {
                            ProductTypeCode = (byte)2,
                            ProductTypeDesc = "Xərc"
                        },
                        new
                        {
                            ProductTypeCode = (byte)3,
                            ProductTypeDesc = "Servis"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("ReportFilter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportLayout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ReportTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("DcReports");

                    b.HasData(
                        new
                        {
                            ReportId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Report_Embedded_ProductList",
                            ReportQuery = "\n\n\n\n\n\n--declare @StartDate date = dateadd(DAY, 1, getdate())\n--declare @StartTime time =  '00:00:00.000'\n\nselect * from (\n\nSelect pro.ProductCode\n		, pro.HierarchyCode\n		, [M?hsulun Genis Adi]= isnull(pro.HierarchyCode + ' ','')  + ProductDesc \n			+ isnull(' ' + Feature04,'') + isnull(' ' + Feature05,'') + isnull(' ' + Feature06,'') + isnull(' ' +Feature07,'')\n			+ isnull(' ' + Feature08,'') + isnull(' ' + Feature09,'') + isnull(' ' + Feature10,'') + isnull(' ' + Feature11,'')\n			+ isnull(' ' + Feature12,'') + isnull(' ' + Feature13,'') + isnull(' ' + Feature16,'') + isnull(' ' + Feature17,'') \n			+ isnull(' ' + Feature18,'') + isnull(' ' + Feature19 + 'x' + Feature20 + 'x' + Feature21,'') + isnull(' ' + Feature22,'')\n			+ isnull(' ' + Feature23,'') + isnull(' ' + Feature24,'') + isnull(' ' + Feature25,'') + isnull(' ' + Feature26,'') \n			+ isnull(' ' + Feature27,'') + isnull(' ' + Feature28,'') \n		, ProductDesc\n		, Balance = isnull(ProductBalance.[depo-01],0)\n		, WholesalePrice\n		, HierarchyDesc\n		, ProductTypeCode\n		--, ProductId	\n		, ProductCost = dbo.GetProductCost(pro.ProductCode)\n		, CalcClosingStockFifo.FIFO_CORG\n		\nfrom DcProducts pro\n\nleft join DcHierarchies on pro.HierarchyCode = DcHierarchies.HierarchyCode\n--left join SiteProducts on SiteProducts.ProductCode = pro.ProductCode\nleft join ProductFeatures ON pro.ProductCode = ProductFeatures.ProductCode \nleft join ProductBalance on ProductBalance.ProductCode = pro.ProductCode\nleft join CalcClosingStockFifo on CalcClosingStockFifo.ProductCode = pro.ProductCode\n\n	--where ProductTypeCode = 1\n	--and (CAST(ih.DocumentDate AS DATETIME) + CAST(ih.DocumentTime AS DATETIME)) <=\n	--	(CAST(@StartDate AS DATETIME) + CAST(@StartTime AS DATETIME))\n	--and il.ProductCode = '5503'\n\n) as tablo \n	order by \ntablo.HierarchyCode \n, tablo.ProductDesc \n\n\n\n\n",
                            ReportTypeId = (byte)0
                        },
                        new
                        {
                            ReportId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Report_Embedded_CurrAccList",
                            ReportQuery = "\n\nselect DcCurrAccs.CurrAccCode\n, CurrAccDesc\n, Balance =ISNULL(SUM(CAST(Amount as money)),0)\n, PhoneNum\n, IsVIP\n, CurrAccTypeCode\nfrom \nDcCurrAccs \nleft join \n(\n	select CurrAccCode\n	, Amount = (QtyIn - QtyOut) * (PriceLoc - (PriceLoc * PosDiscount / 100))  -- (-2) * 100 = -200 usd\n	--, Amount = NetAmountLoc  -- (-2) * 100 = -200 usd\n	from TrInvoiceLines il\n	left join TrInvoiceHeaders ih  on il.InvoiceHeaderId = ih.InvoiceHeaderId\n	where 1=1\n	--and (CAST(ih.DocumentDate AS DATETIME) + CAST(ih.DocumentTime AS DATETIME)) <=\n	--(CAST(@EndDate AS DATETIME) + CAST(@EndTime AS DATETIME))\n\n	UNION ALL \n	\n	select CurrAccCode\n	, Amount = PaymentLoc -- 200 usd\n	from TrPaymentLines pl\n	left join TrPaymentHeaders ph on pl.PaymentHeaderId = ph.PaymentHeaderId	\n	where 1=1 \n	--and (CAST(ph.OperationDate AS DATETIME) + CAST(ph.OperationTime AS DATETIME)) <=\n	--(CAST(@EndDate AS DATETIME) + CAST(@EndTime AS DATETIME))\n) as balance on balance.CurrAccCode = DcCurrAccs.CurrAccCode\nwhere 1 = 1 \n	--and DcCurrAccs.IsVIP = 1 \n	--and balance.CurrAccCode = '1403'\ngroup by DcCurrAccs.CurrAccCode\n, CurrAccDesc\n, PhoneNum\n, IsVIP\n, CurrAccTypeCode\norder by CurrAccDesc",
                            ReportTypeId = (byte)0
                        },
                        new
                        {
                            ReportId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Report_Embedded_CashRegList",
                            ReportQuery = "\n\n\n\nselect DcCurrAccs.CurrAccCode\n, CurrAccDesc\n, Balance =ISNULL(SUM(CAST(PaymentLoc as money)),0)\n, PhoneNum\n, IsVIP\n, CurrAccTypeCode\nfrom \nDcCurrAccs \nleft join  TrPaymentLines on TrPaymentLines.CashRegisterCode = DcCurrAccs.CurrAccCode\nwhere CurrAccTypeCode = 5 and IsDisabled = 0 and PaymentTypeCode = 1 \n	--and DcCurrAccs.IsVIP = 1 \n	--and balance.CurrAccCode = '1403'\ngroup by DcCurrAccs.CurrAccCode\n, CurrAccDesc\n, PhoneNum\n, IsVIP\n, CurrAccTypeCode\norder by CurrAccDesc\n\n\n\n\n\n\n",
                            ReportTypeId = (byte)0
                        },
                        new
                        {
                            ReportId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Report_Embedded_InvoiceReport",
                            ReportQuery = "\r\n--Declare @invoiceHeader nvarchar(50) = 'dd6927e4-d33c-4dc7-929c-1410c299e0a9'\r\n\r\n	select \r\n * from (\r\n	select  InvoiceLineId\r\n			,	[Marka] = isnull(' ' +  Feature02Desc,'')\r\n		  , [Ceki] = isnull(' ' + Feature04Desc,'')\r\n		  , [Reng] = isnull(' ' + Feature05Desc,'')\r\n		  , [Məhsul Tipi] = isnull(' ' + Feature06Desc,'')\r\n		  , [Soyutma Tipi] = isnull(' ' + Feature07Desc,'')\r\n		  , [BTU] = isnull(' ' + Feature09Desc,'')\r\n		  , [Ekran Ölçüsü] = isnull(' ' + Feature10Desc,'')\r\n		  , [Ekran İcazəsi] = isnull(' ' + Feature11Desc,'')\r\n		  , [Motorun Növü] = isnull(' ' + Feature12Desc,'')\r\n		  , [Həcmi] = isnull(' ' + Feature13Desc,'')\r\n		  , [Soyuducu Kameranın Həcmi] = isnull(' ' + Feature14Desc,'')\r\n		  , [Dondurucu Kameranın Həcmi] = isnull(' ' + Feature15Desc,'')\r\n		  , [Istehsalçı Ölkə] = isnull(' ' + Feature16Desc,'')\r\n		  , [Məhsuldarlıq] = isnull(' ' + Feature17Desc,'')\r\n		  , [Güc] = isnull(' ' + Feature18Desc,'')\r\n		  , [Tərtib Edən İstifadəçi] =( select CurrAccDesc from DcCurrAccs where CurrAccCode = TrInvoiceHeaders.CreatedUserName)\r\n	, TrInvoiceHeaders.InvoiceHeaderId\r\n	, DcProducts.ProductCode\r\n	, ProductDesc\r\n	, QtyIn = QtyIn\r\n	, QtyOut = QtyOut\r\n	, Price\r\n	, TrInvoiceLines.PosDiscount\r\n	, TrInvoiceHeaders.ProcessCode\r\n	, ProcessDesc\r\n	, TrInvoiceLines.CurrencyCode\r\n	, DcProducts.HierarchyCode\r\n	, HierarchyDesc\r\n	, IsReturn\r\n	, CustomsDocumentNumber\r\n	, PrintCount\r\n	, NetAmount\r\n	, LineDescription\r\n	, PriceLoc\r\n	, TrInvoiceLines.ExchangeRate\r\n	, NetAmountLoc = (QtyIn-QtyOut) * PriceLoc * (100 - TrInvoiceLines.PosDiscount) / 100\r\n	, DocumentNumber\r\n	, DocumentDate\r\n	, DocumentTime\r\n	, DcCurrAccs.CurrAccCode\r\n	, DcCurrAccs.CurrAccDesc\r\n	, FirstName\r\n	, PhoneNum\r\n	, HeaderCreatedDate = TrInvoiceHeaders.CreatedDate\r\n	, LineCreatedDate = TrInvoiceLines.CreatedDate\r\n	, TrInvoiceHeaders.CreatedUserName\r\n	, CurrAccBalance = ISNULL((select sum((QtyIn - QtyOut) * (PriceLoc - (PriceLoc * PosDiscount / 100)))  -- (-2) * 100 = -200 usd\r\n							 	from TrInvoiceLines il\r\n							 	left join TrInvoiceHeaders ih on il.InvoiceHeaderId = ih.InvoiceHeaderId\r\n							 	where ih.CurrAccCode = TrInvoiceHeaders.CurrAccCode\r\n							 	and (CAST(ih.DocumentDate AS DATETIME) + CAST(ih.DocumentTime AS DATETIME)) <=\r\n							 	(CAST(TrInvoiceHeaders.DocumentDate AS DATETIME) + CAST(TrInvoiceHeaders.DocumentTime AS DATETIME))														\r\n							 ), 0)\r\n							 + \r\n							 ISNULL((select sum(PaymentLoc) -- 200 usd\r\n							 	from TrPaymentLines pl\r\n							 	left join TrPaymentHeaders ph on pl.PaymentHeaderId = ph.PaymentHeaderId\r\n							 	where ph.CurrAccCode = TrInvoiceHeaders.CurrAccCode\r\n							 		and (CAST(ph.DocumentDate AS DATETIME) + CAST(ph.DocumentTime AS DATETIME)) <=\r\n							 		(CAST(TrInvoiceHeaders.DocumentDate AS DATETIME) + CAST(TrInvoiceHeaders.DocumentTime AS DATETIME))\r\n							 ), 0)\r\n	, BalanceCode = 'M' + Convert(nvarchar, Format((select SUM(QtyIn - QtyOut) ProductBalance\r\n						from TrInvoiceLines il \r\n						left join TrInvoiceHeaders ih on il.InvoiceHeaderId = ih.InvoiceHeaderId\r\n						where il.ProductCode = TrInvoiceLines.ProductCode and WarehouseCode = TrInvoiceHeaders.WarehouseCode),'000'))\r\n	, TrInvoiceHeaders.WarehouseCode\r\n	, TrInvoiceHeaders.ToWarehouseCode\r\n	, [Depodan] = wareIn.WarehouseDesc\r\n	, [Depoya] = wareOut.WarehouseDesc\r\n	, Description\r\n	, TrInvoiceHeaders.StoreCode\r\n	, PaymentLoc = ISNULL((	select sum(PaymentLoc) from TrPaymentLines pl \r\n							join TrPaymentHeaders ph on pl.PaymentHeaderId = ph.PaymentHeaderId\r\n							where ph.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId), 0)\r\n	, ProductCost\r\n	from TrInvoiceLines\r\n\r\n	join TrInvoiceHeaders on TrInvoiceLines.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId\r\n	left join DcCurrAccs on TrInvoiceHeaders.CurrAccCode = DcCurrAccs.CurrAccCode\r\n	left join DcProducts on TrInvoiceLines.ProductCode = DcProducts.ProductCode\r\n	left join DcProcesses on TrInvoiceHeaders.ProcessCode = DcProcesses.ProcessCode\r\n	left join DcHierarchies on DcHierarchies.HierarchyCode = DcProducts.HierarchyCode\r\n	left join DcCurrencies on DcCurrencies.CurrencyCode = TrInvoiceLines.CurrencyCode\r\n	left join DcWarehouses wareIn on wareIn.WarehouseCode = TrInvoiceHeaders.WarehouseCode\r\n	left join DcWarehouses wareOut on wareOut.WarehouseCode = TrInvoiceHeaders.ToWarehouseCode\r\n	left join ProductFeatures on ProductFeatures.ProductCode = DcProducts.ProductCode\r\n\r\n	where TrInvoiceHeaders.InvoiceHeaderId = @invoiceHeader\r\n\r\n\r\n) AS PivotTable2\r\n\r\n	order by LineCreatedDate\r\n\r\n\r\n",
                            ReportTypeId = (byte)0
                        },
                        new
                        {
                            ReportId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Report_Embedded_Barcode",
                            ReportQuery = "\n\n\nSELECT   t2.number + 1 RepeatNumber\n	, DcProducts.ProductDesc\n	, DcProducts.WholesalePrice\n	, pb.*\nFROM    TrProductBarcodes pb\nJOIN DcProducts on DcProducts.ProductCode = pb.ProductCode\nJOIN    master.dbo.spt_values t2 ON t2.type = 'P' AND t2.number < pb.Qty\n",
                            ReportTypeId = (byte)0
                        },
                        new
                        {
                            ReportId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Xərclər",
                            ReportQuery = "\n\n\n\n\n\n\n\nselect Price\n, ProductDesc\n, CurrencyCode\n, NetAmountLoc\n, DocumentDate \n, LineDescription\n, StoreCode\nfrom TrInvoiceLines\nleft join TrInvoiceHeaders on TrInvoiceLines.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId\nleft join DcProducts on TrInvoiceLines.ProductCode = DcProducts.ProductCode\nwhere ProcessCode = 'EX'",
                            ReportTypeId = (byte)1
                        },
                        new
                        {
                            ReportId = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Pulun Hərəkəti",
                            ReportQuery = "\n\n\n\nselect  PaymentLineId\n, TrPaymentHeaders.PaymentHeaderId\n, TrPaymentHeaders.InvoiceHeaderId\n, InvoiceNumber = tph.DocumentNumber\n, DcPaymentTypes.PaymentTypeCode\n, PaymentTypeDesc\n, PaymentLoc\n, Payment\n, CurrencyCode\n, LineDescription\n, TrPaymentHeaders.DocumentNumber\n, TrPaymentHeaders.DocumentDate\n, TrPaymentHeaders.DocumentTime\n, TrPaymentHeaders.OperationDate\n, TrPaymentHeaders.OperationTime\n, OperationType\n, TrPaymentHeaders.CurrAccCode\n, CashRegisterCode\n, FirstName\n, DcCurrAccs.CurrAccDesc\n, TrPaymentHeaders.StoreCode\n, tpl.CreatedDate\n, tpl.CreatedUserName\n, [Cari Hesab Balansı] = (	(select sum ((QtyIn - QtyOut) * (PriceLoc - (PriceLoc * PosDiscount / 100)))  -- (-2) * 100 = -200 usd\n	--, Amount = NetAmountLoc  -- (-2) * 100 = -200 usd\n	from TrInvoiceLines il\n	left join TrInvoiceHeaders ih  on il.InvoiceHeaderId = ih.InvoiceHeaderId\n	where DcCurrAccs.CurrAccCode = ih.CurrAccCode\n	and (CAST(ih.DocumentDate AS DATETIME) + CAST(ih.DocumentTime AS DATETIME)) <=\n	(CAST(tph.DocumentDate AS DATETIME) + CAST(tph.DocumentTime AS DATETIME)))\n		+ \n(select Sum(PaymentLoc) -- 200 usd\n	from TrPaymentLines pl\n	left join TrPaymentHeaders ph on pl.PaymentHeaderId = ph.PaymentHeaderId	\n	where DcCurrAccs.CurrAccCode = ph.CurrAccCode \n			and (CAST(ph.DocumentDate AS DATETIME) + CAST(ph.DocumentTime AS DATETIME)) <=\n			(CAST(tph.DocumentDate AS DATETIME) + CAST(tph.DocumentTime AS DATETIME)))\n		)\n\n from TrPaymentLines tpl\nleft join TrPaymentHeaders on tpl.PaymentHeaderId = TrPaymentHeaders.PaymentHeaderId\nleft join TrInvoiceHeaders tph on TrPaymentHeaders.InvoiceHeaderId = tph.InvoiceHeaderId\nleft Join DcCurrAccs on TrPaymentHeaders.CurrAccCode = DcCurrAccs.CurrAccCode\nleft join DcPaymentTypes on tpl.PaymentTypeCode = DcPaymentTypes.PaymentTypeCode\norder by TrPaymentHeaders.OperationDate asc, TrPaymentHeaders.OperationTime asc\n\n\n\n",
                            ReportTypeId = (byte)1
                        },
                        new
                        {
                            ReportId = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Cari Hesab ilə Əməliyatlar",
                            ReportQuery = "\n\n\nselect 	CurrAccDesc\n	--, ProductDesc\n	, NetAmountLoc\n	, PaymentLoc\n	, [Ara Toplam] = sum(Summary) OVER (ORDER BY DocumentDate, DocumentTime )\n	, ProcessDesc\n	, DocumentNumber\n	, CurrAccCode\n	, DocumentDate\n	, DocumentTime\n	, InvoiceHeaderId\n	, PaymentHeaderId\n	, LineDescription\n	, IsReturn\n	, StoreCode\n	--, LineId\nfrom (\n	select FirstName\n	, CurrAccDesc\n	--, ProductDesc\n	, TrInvoiceHeaders.InvoiceHeaderId\n	, PaymentHeaderId = cast(cast(0 as binary) as uniqueidentifier)\n	, NetAmountLoc = sum((QtyIn - QtyOut) * (PriceLoc * (100 - PosDiscount) / 100))  -- (-2) * 100 = -200 usd\n	, PaymentLoc= 0\n	, Summary = sum((QtyIn - QtyOut) * (PriceLoc * (100 - PosDiscount) / 100))  -- (-2) * 100 = -200 usd\n	, ProcessDesc = ProcessDesc\n	, DocumentNumber\n	, TrInvoiceHeaders.StoreCode\n	, TrInvoiceHeaders.CurrAccCode\n	, TrInvoiceHeaders.DocumentDate\n	, TrInvoiceHeaders.DocumentTime\n	, LineDescription = TrInvoiceHeaders.Description\n	, TrInvoiceHeaders.ProcessCode\n	, IsReturn\n	--, LineId = InvoiceLineId\n	from TrInvoiceLines \n	left join TrInvoiceHeaders on TrInvoiceLines.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId\n	left join DcCurrAccs on TrInvoiceHeaders.CurrAccCode = DcCurrAccs.CurrAccCode\n	left join DcProcesses on DcProcesses.ProcessCode = TrInvoiceHeaders.ProcessCode\n	--left join DcProducts on DcProducts.ProductCode = TrInvoiceLines.ProductCode\n	group by FirstName\n			, CurrAccDesc\n			, ProcessDesc\n			, DocumentNumber\n			, TrInvoiceHeaders.InvoiceHeaderId\n			, TrInvoiceHeaders.CurrAccCode\n			, TrInvoiceHeaders.DocumentDate	\n			, TrInvoiceHeaders.DocumentTime\n			, TrInvoiceHeaders.Description\n			, TrInvoiceHeaders.StoreCode\n	, TrInvoiceHeaders.ProcessCode\n	, IsReturn\n	\n	UNION ALL \n	\n	select FirstName\n	--, ProductCode = ''\n	, CurrAccDesc = CurrAccDesc\n	, InvoiceHeaderId = cast(cast(0 as binary) as uniqueidentifier)\n	, TrPaymentHeaders.PaymentHeaderId\n	, NetAmountLoc = 0\n	, PaymentLoc\n	, Summary = PaymentLoc\n	, ProcessDesc = N'Ödəniş'\n	, DocumentNumber\n	, TrPaymentHeaders.StoreCode\n	, TrPaymentHeaders.CurrAccCode\n	, DocumentDate = TrPaymentHeaders.OperationDate\n	, DocumentTime = TrPaymentHeaders.OperationTime\n	, LineDescription\n	, ProcessCode = 'PA'\n	, IsReturn = CAST(0 as bit)\n	--, LineId = PaymentLineId\n	from TrPaymentLines\n	left join TrPaymentHeaders on TrPaymentLines.PaymentHeaderId = TrPaymentHeaders.PaymentHeaderId\n	left join DcCurrAccs  on TrPaymentHeaders.CurrAccCode = DcCurrAccs.CurrAccCode	\n\n) as CurrAccExtra where 1=1 {CurrAccCode}\n\norder by DocumentDate, DocumentTime",
                            ReportTypeId = (byte)1
                        },
                        new
                        {
                            ReportId = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Məhsulun Hərəkəti",
                            ReportQuery = "\n\n\n\n\nselect  InvoiceLineId\n, TrInvoiceHeaders.InvoiceHeaderId\n, TrInvoiceLines.ProductCode\n, [Məhsulun Geniş Adı] = isnull(DcProducts.HierarchyCode + ' ','')  + ProductDesc +  isnull(' ' + Feature04,'') + isnull(' ' + Feature05,'') \n		  + isnull(' ' + Feature06,'') + isnull(' ' + Feature07,'') + isnull(' ' + Feature08,'') + isnull(' ' + Feature09,'') + isnull(' ' + Feature10,'') \n		  + isnull(' ' + Feature11,'') + isnull(' ' + Feature12,'') + isnull(' ' + Feature13,'') + isnull(' ' + Feature16,'') + isnull(' ' + Feature17,'') \n		  + isnull(' ' + Feature18,'') + isnull(' ' + Feature19 + 'x' + Feature20 + 'x' + Feature21,'') + isnull(' ' + Feature22,'')+ isnull(' ' + Feature23,'')\n		  + isnull(' ' + Feature24,'') + isnull(' ' + Feature25,'') + isnull(' ' + Feature26,'') + isnull(' ' + Feature27,'') + isnull(' ' + Feature28,'') \n		  + isnull(' ' + Feature29,'') \n\n\n, ProductDesc\n, QtyIn\n, QtyOut\n, Price\n, PriceLoc\n, Net = (QtyIn - QtyOut) * (PriceLoc - (PriceLoc * TrInvoiceLines.PosDiscount / 100))\n, [Qiymət End.li] = Price * (1 - (TrInvoiceLines.PosDiscount / 100))\n, Amount\n, NetAmountLoc\n, [Qaime Üzrə Ödəniş] = (select sum(TrPaymentLines.PaymentLoc) from TrPaymentLines \n		join TrPaymentHeaders on TrPaymentHeaders.PaymentHeaderId = TrPaymentLines.PaymentHeaderId\n		where TrPaymentHeaders.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId)\n, LineDescription\n, SalesPersonCode\n, CurrencyCode\n, ExchangeRate\n, TrInvoiceHeaders.ProcessCode\n, ProcessDesc\n, DocumentNumber\n, IsReturn\n, ProductCost\n, Benefit = (QtyIn - QtyOut) * ((PriceLoc * (100 - TrInvoiceLines.PosDiscount) / 100) - ProductCost)\n, DocumentDate\n, DocumentTime\n, OperationDate\n, OperationTime\n, Description\n, TrInvoiceLines.PosDiscount\n, TrInvoiceHeaders.CurrAccCode\n, DcCurrAccs .CurrAccDesc\n, DcCurrAccTypes.CurrAccTypeDesc\n, DcCurrAccs.CurrAccTypeCode\n, TrInvoiceHeaders.OfficeCode\n, TrInvoiceHeaders.StoreCode\n, WarehouseCode\n, CustomsDocumentNumber\n, PosTerminalId\n, IsSuspended\n, IsCompleted\n, PrintCount\n, IsSalesViaInternet\n, IsLocked\n, DcProducts.ProductTypeCode\n, ProductTypeDesc\n, UsePos\n, PromotionCode\n, TaxRate\n, RetailPrice\n, PurchasePrice\n, WholesalePrice\n, TrInvoiceLines.CreatedDate\n, Balance = (Select sum(QtyIn - QtyOut) from TrInvoiceLines il where il.ProductCode = TrInvoiceLines .ProductCode)\n, TrInvoiceHeaders.CreatedUserName\n, ImagePath\n--, ROW_NUMBER() OVER (ORDER BY DocumentDate DESC) AS RowNum  \n\nfrom TrInvoiceLines \nleft join TrInvoiceHeaders on TrInvoiceLines.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId\nleft join DcProducts on TrInvoiceLines.ProductCode = DcProducts.ProductCode\nleft join DcProductTypes on DcProducts.ProductTypeCode = DcProductTypes.ProductTypeCode\nleft join DcCurrAccs on TrInvoiceHeaders.CurrAccCode = DcCurrAccs.CurrAccCode\nleft join DcCurrAccTypes on DcCurrAccs.CurrAccTypeCode = DcCurrAccTypes.CurrAccTypeCode\nleft join DcProcesses on TrInvoiceHeaders.ProcessCode = DcProcesses.ProcessCode\nleft join DcCurrAccs as SalesPerson on TrInvoiceLines.SalesPersonCode = SalesPerson.CurrAccCode\nleft join ProductFeatures on ProductFeatures.ProductCode = DcProducts.ProductCode\n\n\norder by DocumentDate, DocumentTime\n\n\n",
                            ReportTypeId = (byte)1
                        },
                        new
                        {
                            ReportId = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Gəlir",
                            ReportQuery = "\n\n\nSELECT Maya = (-1)*(case when Dvijok.ProcessCode = 'RS' then (Dvijok.QtyIn - Dvijok.QtyOut) * ISNULL(ISNULL(NULLIF(SonQiymet, 0), ProductCost),0) else 0 end)\n, Menfeet = (-1)*(case when ProcessCode = 'RS' then (Dvijok.QtyIn - Dvijok.QtyOut) * ((Dvijok.PriceLoc * (100 - PosDiscount) / 100) - ISNULL(ISNULL(NULLIF(SonQiymet, 0), ProductCost),0)) else 0 end)\n, [Net Menfeet] = (-1)*(case when ProcessCode = 'RS' then (Dvijok.QtyIn - Dvijok.QtyOut) * ((Dvijok.PriceLoc * (100 - PosDiscount) / 100) - ISNULL(ISNULL(NULLIF(SonQiymet, 0), ProductCost),0)) else 0 end) - Xərc\n, *\nFROM (\nselect  InvoiceLineId\n, TrInvoiceHeaders.InvoiceHeaderId\n, TrInvoiceLines.ProductCode\n, ProductDesc\n, Qty = (QtyIn-QtyOut)*(-1)\n, Price\n, PriceLoc\n, Amount\n, TrInvoiceLines.PosDiscount\n, QtyIn\n, QtyOut\n, Xərc = case when TrInvoiceHeaders.ProcessCode = 'EX' then NetAmountLoc else 0 end\n, Satis = (-1)*(case when TrInvoiceHeaders.ProcessCode = 'RS' then (QtyIn - QtyOut) * ((PriceLoc * (100 - TrInvoiceLines.PosDiscount) / 100)) else 0 end)\n, Artirma = case when TrInvoiceHeaders.ProcessCode = 'CI' then NetAmountLoc else 0 end\n, Silinme = case when TrInvoiceHeaders.ProcessCode = 'CO' then NetAmountLoc else 0 end\n, ProductCost\n, SonQiymet = (select top 1 toplam = il.PriceLoc * (1 - (il.PosDiscount / 100))  \n					from TrInvoiceLines il\n					join TrInvoiceHeaders ih on ih.InvoiceHeaderId = il.InvoiceHeaderId\n					where il.ProductCode = TrInvoiceLines.ProductCode\n					and (ih.ProcessCode = 'RP' or ih.ProcessCode = 'CI')\n					and ih.IsReturn = 0\n					and (CAST(ih.DocumentDate AS DATETIME) + CAST(ih.DocumentTime AS DATETIME)) <=\n						 (CAST(TrInvoiceHeaders.DocumentDate AS DATETIME) + CAST(TrInvoiceHeaders.DocumentTime AS DATETIME))\n					ORDER BY ih.DocumentDate desc\n					, il.CreatedDate desc )	\n\n, LineDescription\n, SalesPersonCode\n, CurrencyCode\n, ExchangeRate\n, TrInvoiceHeaders.ProcessCode\n, ProcessDesc\n, InvoiceNumber = DocumentNumber\n, Faiz =Round( ((PriceLoc * (100 - TrInvoiceLines.PosDiscount) / 100) - ProductCost)  / NULLIF(ProductCost,0) * 100,2)\n, DocumentDate\n, DocumentTime\n, OperationDate\n, OperationTime\n, Description\n, TrInvoiceHeaders.CurrAccCode\n, DcCurrAccs.CurrAccDesc\n, DcCurrAccTypes.CurrAccTypeDesc\n, DcCurrAccs.CurrAccTypeCode\n, TrInvoiceHeaders.OfficeCode\n, TrInvoiceHeaders.StoreCode\n, WarehouseCode\n, CustomsDocumentNumber\n, PosTerminalId\n, IsSuspended\n, IsCompleted\n, IsSalesViaInternet\n, IsLocked\n, DcProducts.ProductTypeCode\n, ProductTypeDesc\n, UsePos\n, PromotionCode\n, TaxRate\n, RetailPrice\n, PurchasePrice\n, WholesalePrice\n, TrInvoiceLines.CreatedDate\n\nfrom TrInvoiceLines \nleft join TrInvoiceHeaders on TrInvoiceLines.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId\nleft join DcProducts on TrInvoiceLines.ProductCode = DcProducts.ProductCode\nleft join DcProductTypes on DcProducts.ProductTypeCode = DcProductTypes.ProductTypeCode\nleft join DcCurrAccs on TrInvoiceHeaders.CurrAccCode = DcCurrAccs.CurrAccCode\nleft join DcCurrAccTypes on DcCurrAccs.CurrAccTypeCode = DcCurrAccTypes.CurrAccTypeCode\nleft join DcProcesses on TrInvoiceHeaders.ProcessCode = DcProcesses.ProcessCode\nleft join DcCurrAccs as SalesPerson on TrInvoiceLines.SalesPersonCode = SalesPerson.CurrAccCode	\n\nwhere TrInvoiceHeaders.ProcessCode IN ('CI', 'CO', 'RS', 'EX')\n--and DocumentNumber = 'RS-000012'\n) Dvijok\norder by Dvijok.DocumentDate\n\n\n\n\n\n\n\n",
                            ReportTypeId = (byte)1
                        },
                        new
                        {
                            ReportId = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Son Gələn Mallar",
                            ReportQuery = "\n\n\nselect \n [Topdan Sat. Qiy.] =  Round(WholesalePrice, 0)\n, [Maya Dəyəri.] =  Round(ProductCost, 0)\n, [%] =CONVERT(int, Round((1 - (PivotTable.ProductCost / NULLIF(PivotTable.WholesalePrice,0))) * 100, 0)) \n, *\nfrom (\n	select prdcts.ProductCode\n	, LastUpdatedDate\n	, UseInternet\n	, ProductDesc \n	, HierarchyCode \n	, FeatureCode\n	, FeatureTypeId\n	, WholesalePrice\n	, ProductCost = (select top 1  PriceLoc * (1 - (PosDiscount / 100))	\n								from TrInvoiceLines il\n								left join TrInvoiceHeaders ih on ih.InvoiceHeaderId = il.InvoiceHeaderId\n								where il.ProductCode = prdcts.ProductCode\n								and ih.ProcessCode IN ('RP', 'CI') \n								and ih.IsReturn = 0\n								order by ih.DocumentDate desc\n										, ih.CreatedDate desc\n								)\n	, [Son Alış Günü] = (select top 1  il.LastUpdatedDate	\n								from TrInvoiceLines il\n								left join TrInvoiceHeaders ih on ih.InvoiceHeaderId = il.InvoiceHeaderId\n								where il.ProductCode = prdcts.ProductCode\n								and ih.ProcessCode IN ('RP') \n								and ih.IsReturn = 0\n								order by ih.DocumentDate desc\n										, ih.CreatedDate desc\n								)\n	, Balance = (Select sum(QtyIn - QtyOut) from TrInvoiceLines il \n								left join TrInvoiceHeaders ih on ih.InvoiceHeaderId = il.InvoiceHeaderId\n								where il.ProductCode = prdcts.ProductCode\n								and ih.WarehouseCode = 'depo-01')\n	from DcProducts prdcts\n	left join TrProductFeatures on TrProductFeatures.ProductCode = prdcts.ProductCode\n\n	where ProductTypeCode = 1\n	) pro\nPIVOT (Max(FeatureCode) FOR FeatureTypeId IN ([3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25]) \n) AS PivotTable \norder by PivotTable.[Son Alış Günü] \n\n\n\n",
                            ReportTypeId = (byte)1
                        },
                        new
                        {
                            ReportId = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Depoların Qalığı",
                            ReportQuery = "\n\nselect DcProducts.ProductCode\n	, DcProducts.ProductDesc\n	, TrInvoiceHeaders.WarehouseCode\n	, Balance = sum(QtyIn - QtyOut)\n	, ProductCost = (select top 1 PriceLoc * (100 - PosDiscount)/100\n					from TrInvoiceLines \n					left join TrInvoiceHeaders on TrInvoiceHeaders.InvoiceHeaderId = TrInvoiceLines.InvoiceHeaderId\n					where TrInvoiceLines.ProductCode = DcProducts.ProductCode\n					and (ProcessCode = 'RP' or ProcessCode = 'CI') \n					{StartDate}\n					order by TrInvoiceHeaders.DocumentDate desc, TrInvoiceHeaders.DocumentTime desc\n					)\n	, Toplam = sum(QtyIn - QtyOut) * (select top 1 PriceLoc * (100 - PosDiscount)/100\n					from TrInvoiceLines \n					left join TrInvoiceHeaders on TrInvoiceHeaders.InvoiceHeaderId = TrInvoiceLines.InvoiceHeaderId\n					where TrInvoiceLines.ProductCode = DcProducts.ProductCode\n					and (ProcessCode = 'RP' or ProcessCode = 'CI') \n					{StartDate}\n					order by TrInvoiceHeaders.DocumentDate desc, TrInvoiceHeaders.DocumentTime desc\n					)\nfrom TrInvoiceLines\nLEFT JOIN TrInvoiceHeaders \n	ON TrInvoiceLines.InvoiceHeaderId = TrInvoiceHeaders.InvoiceHeaderId\nLEFT JOIN DcProducts \n	on DcProducts.ProductCode = TrInvoiceLines.ProductCode\nwhere DcProducts.ProductTypeCode = 1\n{StartDate}\nGroup by DcProducts.ProductCode\n	, DcProducts.ProductDesc\n	, TrInvoiceHeaders.WarehouseCode\n\n",
                            ReportTypeId = (byte)1
                        },
                        new
                        {
                            ReportId = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportLayout = "",
                            ReportName = "Məhsul Kartı",
                            ReportQuery = "	--declare @StartDate date = dateadd(DAY, 1, getdate())\n	--declare @StartTime time =  '00:00:00.000'\n\nselect DcProducts.ProductCode\n, [Məhsulun Geniş Adı] = isnull(DcHierarchies.HierarchyCode + ' ','')  + ProductDesc \n		  + isnull(' ' + Feature01,'') + isnull(' ' + Feature02,'') + isnull(' ' + Feature03,'') + isnull(' ' + Feature04,'') + isnull(' ' + Feature05,'') \n		  + isnull(' ' + Feature06,'') + isnull(' ' + Feature07,'') + isnull(' ' + Feature08,'') + isnull(' ' + Feature09,'') + isnull(' ' + Feature10,'') \n		  + isnull(' ' + Feature11,'') + isnull(' ' + Feature12,'') + isnull(' ' + Feature13,'') + isnull(' ' + Feature16,'') + isnull(' ' + Feature17,'') \n		  + isnull(' ' + Feature18,'') + isnull(' ' + Feature19,'') + isnull(' ' + Feature20,'')\n, ProductDesc\n, WholesalePrice\n, DcHierarchies.HierarchyCode\n, HierarchyDesc\n, ProductTypeCode\n, [01] = isnull(' ' + Feature01Desc,'')\n, [02] = isnull(' ' + Feature02Desc,'')\n, [03] = isnull(' ' + Feature03Desc,'')\n, [04] = isnull(' ' + Feature04Desc,'')\n, [05] = isnull(' ' + Feature05Desc,'')\n, [06] = isnull(' ' + Feature06Desc,'')\n, [07] = isnull(' ' + Feature07Desc,'')\n, [09] = isnull(' ' + Feature09Desc,'')\n, [10] = isnull(' ' + Feature10Desc,'')\n, [11] = isnull(' ' + Feature11Desc,'')\n, [12] = isnull(' ' + Feature12Desc,'')\n, [13] = isnull(' ' + Feature13Desc,'')\n, [14] = isnull(' ' + Feature14Desc,'')\n, [15] = isnull(' ' + Feature15Desc,'')\n, [16] = isnull(' ' + Feature16Desc,'')\n, [17] = isnull(' ' + Feature17Desc,'')\n, [18] = isnull(' ' + Feature18Desc,'')\n, [19] = isnull(' ' + Feature22Desc,'')\n, [20] = isnull(' ' + Feature23Desc,'')\n\nfrom DcProducts\n\nleft join DcHierarchies on DcProducts.HierarchyCode = DcHierarchies.HierarchyCode\nleft join ProductFeatures on ProductFeatures.ProductCode = DcProducts.ProductCode\n\nwhere ProductTypeCode = 1\n			\norder by isnull(DcHierarchies.HierarchyCode + ' ','')  + ProductDesc\n",
                            ReportTypeId = (byte)2
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcReportType", b =>
                {
                    b.Property<byte>("ReportTypeId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("ReportTypeDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportTypeId");

                    b.ToTable("DcReportTypes");

                    b.HasData(
                        new
                        {
                            ReportTypeId = (byte)0,
                            IsDisabled = false,
                            ReportTypeDesc = "Embedded",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            ReportTypeId = (byte)1,
                            IsDisabled = false,
                            ReportTypeDesc = "Grid",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            ReportTypeId = (byte)2,
                            IsDisabled = false,
                            ReportTypeDesc = "Detail",
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcReportVariable", b =>
                {
                    b.Property<int>("VariableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariableId"));

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Representative")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VariableOperator")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VariableProperty")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("VariableTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("VariableValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VariableValueType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("VariableId");

                    b.HasIndex("ReportId");

                    b.HasIndex("VariableTypeId");

                    b.ToTable("DcReportVariables");

                    b.HasData(
                        new
                        {
                            VariableId = 1,
                            ReportId = 13,
                            Representative = "{CurrAccCode}",
                            VariableOperator = "=",
                            VariableProperty = "CurrAccCode",
                            VariableTypeId = (byte)2,
                            VariableValue = "c-0000001",
                            VariableValueType = "System.String"
                        },
                        new
                        {
                            VariableId = 2,
                            ReportId = 17,
                            Representative = "{StartDate}",
                            VariableOperator = "<=",
                            VariableProperty = "DocumentDate",
                            VariableTypeId = (byte)2,
                            VariableValue = "08.01.2030",
                            VariableValueType = "System.DateTime"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcReportVariableType", b =>
                {
                    b.Property<byte>("VariableTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("VariableTypeDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VariableTypeId");

                    b.ToTable("dcReportVariableTypes");

                    b.HasData(
                        new
                        {
                            VariableTypeId = (byte)1,
                            VariableTypeDesc = "Parameter"
                        },
                        new
                        {
                            VariableTypeId = (byte)2,
                            VariableTypeDesc = "Filter"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcRole", b =>
                {
                    b.Property<string>("RoleCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("RoleDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleCode");

                    b.ToTable("DcRoles");

                    b.HasData(
                        new
                        {
                            RoleCode = "Admin",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleDesc = "Administrator"
                        },
                        new
                        {
                            RoleCode = "MGZ",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleDesc = "Mağaza İstifadəçisi"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcTerminal", b =>
                {
                    b.Property<int>("TerminalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerminalId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<Guid?>("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TerminalDesc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TouchScaleFactor")
                        .HasColumnType("int");

                    b.Property<bool>("TouchUIMode")
                        .HasColumnType("bit");

                    b.HasKey("TerminalId");

                    b.ToTable("DcTerminals");

                    b.HasData(
                        new
                        {
                            TerminalId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TerminalDesc = "Notebook",
                            TouchScaleFactor = 1,
                            TouchUIMode = false
                        },
                        new
                        {
                            TerminalId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TerminalDesc = "Telefon",
                            TouchScaleFactor = 2,
                            TouchUIMode = true
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcVariable", b =>
                {
                    b.Property<string>("VariableCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("LastNumber")
                        .HasColumnType("int");

                    b.Property<string>("VariableDesc")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("VariableCode");

                    b.ToTable("DcVariables");

                    b.HasData(
                        new
                        {
                            VariableCode = "20",
                            VariableDesc = "Barkod"
                        },
                        new
                        {
                            VariableCode = "C",
                            VariableDesc = "Cari"
                        },
                        new
                        {
                            VariableCode = "CI",
                            VariableDesc = "Sayım Artırma"
                        },
                        new
                        {
                            VariableCode = "CO",
                            VariableDesc = "Sayım Azaltma"
                        },
                        new
                        {
                            VariableCode = "P",
                            VariableDesc = "Məhsul"
                        },
                        new
                        {
                            VariableCode = "RS",
                            VariableDesc = "Pərakəndə Satış"
                        },
                        new
                        {
                            VariableCode = "RP",
                            VariableDesc = "Pərakəndə Alış"
                        },
                        new
                        {
                            VariableCode = "PA",
                            VariableDesc = "Ödəmə"
                        },
                        new
                        {
                            VariableCode = "SB",
                            VariableDesc = "Toptan Alış"
                        },
                        new
                        {
                            VariableCode = "WS",
                            VariableDesc = "Toptan Satış"
                        },
                        new
                        {
                            VariableCode = "RSO",
                            VariableDesc = "Pərakəndə Satış Sifarişi"
                        },
                        new
                        {
                            VariableCode = "RPO",
                            VariableDesc = "Pərakəndə Alış Sifarişi"
                        },
                        new
                        {
                            VariableCode = "SBO",
                            VariableDesc = "Toptan Alış Sifarişi"
                        },
                        new
                        {
                            VariableCode = "WSO",
                            VariableDesc = "Topdan Satış Sifarişi"
                        },
                        new
                        {
                            VariableCode = "EX",
                            VariableDesc = "Xərclər"
                        },
                        new
                        {
                            VariableCode = "IT",
                            VariableDesc = "Mal Transferi"
                        },
                        new
                        {
                            VariableCode = "CT",
                            VariableDesc = "Pul transferi"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.DcWarehouse", b =>
                {
                    b.Property<string>("WarehouseCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ControlStockLevel")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("PermitNegativeStock")
                        .HasColumnType("bit");

                    b.Property<Guid>("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseDesc")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte>("WarehouseTypeCode")
                        .HasColumnType("tinyint");

                    b.Property<bool>("WarnNegativeStock")
                        .HasColumnType("bit");

                    b.Property<bool>("WarnStockLevelRate")
                        .HasColumnType("bit");

                    b.HasKey("WarehouseCode");

                    b.ToTable("DcWarehouses");

                    b.HasData(
                        new
                        {
                            WarehouseCode = "depo-01",
                            ControlStockLevel = false,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            IsDisabled = false,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfficeCode = "ofs01",
                            PermitNegativeStock = false,
                            RowGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            StoreCode = "mgz01",
                            WarehouseDesc = "Mərkəz deposu",
                            WarehouseTypeCode = (byte)0,
                            WarnNegativeStock = false,
                            WarnStockLevelRate = false
                        });
                });

            modelBuilder.Entity("Foxoft.Models.Entity.SlugifyResult", b =>
                {
                    b.Property<string>("Slugify")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("SlugifyResult", (string)null);
                });

            modelBuilder.Entity("Foxoft.Models.GetNextDocNum", b =>
                {
                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("GetNextDocNum", (string)null);
                });

            modelBuilder.Entity("Foxoft.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("Foxoft.Models.RetailSale", b =>
                {
                    b.Property<string>("trInvoiceLineId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("trInvoiceLineId");

                    b.ToTable((string)null);

                    b.ToView("RetailSale", (string)null);
                });

            modelBuilder.Entity("Foxoft.Models.SettingStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DesignFileFolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrinterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("StoreCode");

                    b.ToTable("SettingStores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DesignFileFolder = "C:\\Foxoft\\Foxoft Design Files",
                            ImageFolder = "C:\\Foxoft\\Foxoft Images",
                            StoreCode = "mgz01"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.SiteProduct", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("Desc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ProductCode");

                    b.ToTable("SiteProducts");
                });

            modelBuilder.Entity("Foxoft.Models.TrClaimReport", b =>
                {
                    b.Property<int>("ClaimReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimReportId"));

                    b.Property<string>("ClaimCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("ClaimReportId");

                    b.HasIndex("ClaimCode");

                    b.HasIndex("ReportId");

                    b.ToTable("TrClaimReports");

                    b.HasData(
                        new
                        {
                            ClaimReportId = 1,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 1
                        },
                        new
                        {
                            ClaimReportId = 2,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 2
                        },
                        new
                        {
                            ClaimReportId = 3,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 3
                        },
                        new
                        {
                            ClaimReportId = 4,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 4
                        },
                        new
                        {
                            ClaimReportId = 5,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 5
                        },
                        new
                        {
                            ClaimReportId = 11,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 11
                        },
                        new
                        {
                            ClaimReportId = 12,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 12
                        },
                        new
                        {
                            ClaimReportId = 13,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 13
                        },
                        new
                        {
                            ClaimReportId = 14,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 14
                        },
                        new
                        {
                            ClaimReportId = 15,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 15
                        },
                        new
                        {
                            ClaimReportId = 16,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 16
                        },
                        new
                        {
                            ClaimReportId = 17,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 17
                        },
                        new
                        {
                            ClaimReportId = 18,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 18
                        });
                });

            modelBuilder.Entity("Foxoft.Models.TrCurrAccRole", b =>
                {
                    b.Property<int>("CurrAccRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrAccRoleId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("CurrAccCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CurrAccRoleId");

                    b.HasIndex("CurrAccCode");

                    b.HasIndex("RoleCode");

                    b.ToTable("TrCurrAccRoles");

                    b.HasData(
                        new
                        {
                            CurrAccRoleId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrAccCode = "C-000001",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.TrFormReport", b =>
                {
                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Shortcut")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormCode", "ReportId");

                    b.HasIndex("ReportId");

                    b.ToTable("TrFormReports");
                });

            modelBuilder.Entity("Foxoft.Models.TrHierarchyFeatureType", b =>
                {
                    b.Property<string>("HierarchyCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("FeatureTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("HierarchyCode", "FeatureTypeId");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("TrHierarchyFeatureTypes");
                });

            modelBuilder.Entity("Foxoft.Models.TrInvoiceHeader", b =>
                {
                    b.Property<Guid>("InvoiceHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("CurrAccCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CustomsDocumentNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DocumentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<TimeSpan>("DocumentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("convert(varchar(10), GETDATE(), 108)");

                    b.Property<byte>("FiscalPrintedState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsMainTF")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalesViaInternet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("OperationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("OperationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("convert(varchar(10), GETDATE(), 108)");

                    b.Property<string>("PosTerminalId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("PrintCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ProcessCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("RelatedInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ToWarehouseCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WarehouseCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("InvoiceHeaderId");

                    b.HasIndex("CurrAccCode");

                    b.HasIndex("ProcessCode");

                    b.HasIndex("DocumentNumber", "ProcessCode", "CurrAccCode");

                    b.ToTable("TrInvoiceHeaders");

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Foxoft.Models.TrInvoiceLine", b =>
                {
                    b.Property<Guid>("InvoiceLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal>("AmountLoc")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("DiscountCampaign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0");

                    b.Property<float>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("1");

                    b.Property<Guid>("InvoiceHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("LineDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("NetAmountLoc")
                        .HasColumnType("money");

                    b.Property<decimal>("PosDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceLoc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("ProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QtyIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<int>("QtyOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<Guid?>("RelatedLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesPersonCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("VatRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("0");

                    b.HasKey("InvoiceLineId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("ProductCode");

                    b.HasIndex("InvoiceHeaderId", "ProductCode");

                    b.ToTable("TrInvoiceLines", t =>
                        {
                            t.HasTrigger("CalcPaymenLineExt");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Foxoft.Models.TrPaymentHeader", b =>
                {
                    b.Property<Guid>("PaymentHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("CurrAccCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DocumentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("DocumentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("convert(varchar(10), GETDATE(), 108)");

                    b.Property<string>("FromCashRegCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("InvoiceHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsMainTF")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("OperationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("OperationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("convert(varchar(10), GETDATE(), 108)");

                    b.Property<string>("OperationType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("PosterminalId")
                        .HasColumnType("smallint");

                    b.Property<string>("ProcessCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ToCashRegCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PaymentHeaderId");

                    b.HasIndex("CurrAccCode");

                    b.HasIndex("InvoiceHeaderId");

                    b.HasIndex("ProcessCode");

                    b.HasIndex("StoreCode");

                    b.HasIndex("ToCashRegCode");

                    b.ToTable("TrPaymentHeaders");
                });

            modelBuilder.Entity("Foxoft.Models.TrPaymentLine", b =>
                {
                    b.Property<Guid>("PaymentLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CashRegisterCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<float>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("LineDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Payment")
                        .HasColumnType("money");

                    b.Property<Guid>("PaymentHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PaymentLoc")
                        .HasColumnType("money");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<byte>("PaymentTypeCode")
                        .HasColumnType("tinyint");

                    b.HasKey("PaymentLineId");

                    b.HasIndex("CashRegisterCode");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("PaymentHeaderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentTypeCode");

                    b.ToTable("TrPaymentLines");
                });

            modelBuilder.Entity("Foxoft.Models.TrPaymentMethodDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("DiscountId", "PaymentMethodId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("TrPaymentMethodDiscounts");
                });

            modelBuilder.Entity("Foxoft.Models.TrPrice", b =>
                {
                    b.Property<int>("PriceCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceCode"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PriceCode");

                    b.HasIndex("ProductCode");

                    b.ToTable("TrPrices");
                });

            modelBuilder.Entity("Foxoft.Models.TrPriceListHeader", b =>
                {
                    b.Property<Guid>("PriceListHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DocumentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<TimeSpan>("DocumentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("convert(varchar(10), GETDATE(), 108)");

                    b.Property<DateTime>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("DueTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("convert(varchar(10), GETDATE(), 108)");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsTexIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("OperationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan>("OperationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("convert(varchar(10), GETDATE(), 108)");

                    b.Property<string>("PriceTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PriceListHeaderId");

                    b.HasIndex("PriceTypeCode");

                    b.ToTable("TrPriceListHeaders");
                });

            modelBuilder.Entity("Foxoft.Models.TrPriceListLine", b =>
                {
                    b.Property<Guid>("PriceListLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("LineDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PriceListHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PriceListLineId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("PriceListHeaderId");

                    b.HasIndex("ProductCode");

                    b.ToTable("TrPriceListLines");
                });

            modelBuilder.Entity("Foxoft.Models.TrProcessPriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("PriceTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcessCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("PriceTypeCode");

                    b.HasIndex("ProcessCode", "PriceTypeCode")
                        .IsUnique();

                    b.ToTable("TrProcessPriceTypes");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductBarcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BarcodeTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Qty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("BarcodeTypeCode");

                    b.HasIndex("ProductCode");

                    b.ToTable("TrProductBarcodes");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductDiscount", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(0);

                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductCode", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("TrProductDiscounts");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductFeature", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(0);

                    b.Property<int>("FeatureTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("FeatureCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<int>("IdentityColumn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityColumn"));

                    b.HasKey("ProductCode", "FeatureTypeId", "FeatureCode");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("FeatureCode", "FeatureTypeId");

                    b.ToTable("TrProductFeatures");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductHierarchy", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(1);

                    b.Property<string>("HierarchyCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.HasKey("ProductCode", "HierarchyCode");

                    b.HasIndex("HierarchyCode");

                    b.ToTable("TrProductHierarchies");
                });

            modelBuilder.Entity("Foxoft.Models.TrReportSubQuery", b =>
                {
                    b.Property<int>("SubQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubQueryId"));

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("SubQueryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubQueryText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubQueryId");

                    b.HasIndex("ReportId");

                    b.ToTable("TrReportSubQueries");
                });

            modelBuilder.Entity("Foxoft.Models.TrReportSubQueryRelationColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("ParentColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubQueryId")
                        .HasMaxLength(150)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubQueryId");

                    b.ToTable("TrReportSubQueryRelationColumns");
                });

            modelBuilder.Entity("Foxoft.Models.TrRoleClaim", b =>
                {
                    b.Property<int>("RoleClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleClaimId"));

                    b.Property<string>("ClaimCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleClaimId");

                    b.HasIndex("ClaimCode");

                    b.HasIndex("RoleCode");

                    b.ToTable("TrRoleClaims");

                    b.HasData(
                        new
                        {
                            RoleClaimId = 1,
                            ClaimCode = "ButunHesabatlar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 2,
                            ClaimCode = "CashRegs",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 3,
                            ClaimCode = "CashTransfer",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 4,
                            ClaimCode = "Column_ProductCost",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 5,
                            ClaimCode = "CountIn",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 6,
                            ClaimCode = "CountOut",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 7,
                            ClaimCode = "CurrAccs",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 8,
                            ClaimCode = "DiscountList",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 9,
                            ClaimCode = "Expense",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 10,
                            ClaimCode = "InventoryTransfer",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 11,
                            ClaimCode = "PaymentDetail",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 12,
                            ClaimCode = "PosDiscount",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 13,
                            ClaimCode = "PriceList",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 14,
                            ClaimCode = "Products",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 15,
                            ClaimCode = "ReportZet",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 16,
                            ClaimCode = "RetailPurchaseInvoice",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 17,
                            ClaimCode = "RetailSaleInvoice",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 18,
                            ClaimCode = "WholesaleInvoice",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 19,
                            ClaimCode = "RetailPurchaseReturn",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 20,
                            ClaimCode = "RetailSaleReturn",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 21,
                            ClaimCode = "WholeSaleReturn",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 22,
                            ClaimCode = "ProductFeatureType",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 23,
                            ClaimCode = "HierarchyFeatureType",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        },
                        new
                        {
                            RoleClaimId = 24,
                            ClaimCode = "Session",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleCode = "Admin"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.TrSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<string>("CurrAccCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<int>("PID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrAccCode")
                        .IsUnique();

                    b.ToTable("TrSessions");
                });

            modelBuilder.Entity("Foxoft.Models.dcClaimType", b =>
                {
                    b.Property<byte>("ClaimTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ClaimTypeDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClaimTypeId");

                    b.ToTable("DcClaimTypes");

                    b.HasData(
                        new
                        {
                            ClaimTypeId = (byte)1,
                            ClaimTypeDesc = "Embaded"
                        },
                        new
                        {
                            ClaimTypeId = (byte)2,
                            ClaimTypeDesc = "Report"
                        },
                        new
                        {
                            ClaimTypeId = (byte)3,
                            ClaimTypeDesc = "Column"
                        });
                });

            modelBuilder.Entity("Foxoft.Models.trInvoiceLineExt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<Guid>("InvoiceLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastUpdatedUserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("substring(suser_name(),patindex('%\\%',suser_name())+(1),(20))");

                    b.Property<decimal?>("LineExpences")
                        .HasColumnType("money");

                    b.Property<decimal>("PriceDiscounted")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceLineId")
                        .IsUnique();

                    b.ToTable("TrInvoiceLineExts");
                });

            modelBuilder.Entity("Foxoft.Models.AppSetting", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrency", "DcCurrency")
                        .WithOne("AppSetting")
                        .HasForeignKey("Foxoft.Models.AppSetting", "LocalCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DcCurrency");
                });

            modelBuilder.Entity("Foxoft.Models.DcClaim", b =>
                {
                    b.HasOne("Foxoft.Models.dcClaimType", "DcClaimType")
                        .WithMany("DcClaims")
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcClaimType");
                });

            modelBuilder.Entity("Foxoft.Models.DcCurrAcc", b =>
                {
                    b.HasOne("Foxoft.Models.DcPaymentType", "DcPaymentType")
                        .WithMany("DcCurrAccs")
                        .HasForeignKey("CashRegPaymentTypeCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Foxoft.Models.DcCurrAccType", "DcCurrAccType")
                        .WithMany("DcCurrAccs")
                        .HasForeignKey("CurrAccTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrAccType");

                    b.Navigation("DcPaymentType");
                });

            modelBuilder.Entity("Foxoft.Models.DcFeature", b =>
                {
                    b.HasOne("Foxoft.Models.DcFeatureType", "DcFeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcFeatureType");
                });

            modelBuilder.Entity("Foxoft.Models.DcPaymentMethod", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcCurrAcc")
                        .WithMany("DcPaymentMethods")
                        .HasForeignKey("DefaultCashRegCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Foxoft.Models.DcPaymentType", "DcPaymentType")
                        .WithMany("DcPaymentMethods")
                        .HasForeignKey("PaymentTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrAcc");

                    b.Navigation("DcPaymentType");
                });

            modelBuilder.Entity("Foxoft.Models.DcProcess", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrency", "DcCurrency")
                        .WithMany("DcProcesses")
                        .HasForeignKey("CustomCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DcCurrency");
                });

            modelBuilder.Entity("Foxoft.Models.DcProduct", b =>
                {
                    b.HasOne("Foxoft.Models.DcHierarchy", "DcHierarchy")
                        .WithMany("DcProducts")
                        .HasForeignKey("HierarchyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Foxoft.Models.DcProductType", "DcProductType")
                        .WithMany("DcProducts")
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcHierarchy");

                    b.Navigation("DcProductType");
                });

            modelBuilder.Entity("Foxoft.Models.DcReport", b =>
                {
                    b.HasOne("Foxoft.Models.DcReportType", "DcReportType")
                        .WithMany("DcReports")
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcReportType");
                });

            modelBuilder.Entity("Foxoft.Models.DcReportVariable", b =>
                {
                    b.HasOne("Foxoft.Models.DcReport", "DcReport")
                        .WithMany("DcReportVariables")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcReportVariableType", "DcReportVariableType")
                        .WithMany("DcReportVariables")
                        .HasForeignKey("VariableTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcReport");

                    b.Navigation("DcReportVariableType");
                });

            modelBuilder.Entity("Foxoft.Models.SettingStore", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcStore")
                        .WithMany("SettingStores")
                        .HasForeignKey("StoreCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcStore");
                });

            modelBuilder.Entity("Foxoft.Models.SiteProduct", b =>
                {
                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithOne("SiteProduct")
                        .HasForeignKey("Foxoft.Models.SiteProduct", "ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DcProduct");
                });

            modelBuilder.Entity("Foxoft.Models.TrClaimReport", b =>
                {
                    b.HasOne("Foxoft.Models.DcClaim", "DcClaim")
                        .WithMany("TrClaimReports")
                        .HasForeignKey("ClaimCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcReport", "DcReport")
                        .WithMany("TrClaimReports")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DcClaim");

                    b.Navigation("DcReport");
                });

            modelBuilder.Entity("Foxoft.Models.TrCurrAccRole", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcCurrAcc")
                        .WithMany("TrCurrAccRole")
                        .HasForeignKey("CurrAccCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcRole", "DcRole")
                        .WithMany("TrCurrAccRoles")
                        .HasForeignKey("RoleCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrAcc");

                    b.Navigation("DcRole");
                });

            modelBuilder.Entity("Foxoft.Models.TrFormReport", b =>
                {
                    b.HasOne("Foxoft.Models.DcForm", "DcForm")
                        .WithMany("TrFormReports")
                        .HasForeignKey("FormCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcReport", "DcReport")
                        .WithMany("TrFormReports")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DcForm");

                    b.Navigation("DcReport");
                });

            modelBuilder.Entity("Foxoft.Models.TrHierarchyFeatureType", b =>
                {
                    b.HasOne("Foxoft.Models.DcFeatureType", "DcFeatureType")
                        .WithMany("TrHierarchyFeatureTypes")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcHierarchy", "DcHierarchy")
                        .WithMany("TrHierarchyFeatureTypes")
                        .HasForeignKey("HierarchyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcFeatureType");

                    b.Navigation("DcHierarchy");
                });

            modelBuilder.Entity("Foxoft.Models.TrInvoiceHeader", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcCurrAcc")
                        .WithMany("TrInvoiceHeaders")
                        .HasForeignKey("CurrAccCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Foxoft.Models.DcProcess", "DcProcess")
                        .WithMany("TrInvoiceHeaders")
                        .HasForeignKey("ProcessCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrAcc");

                    b.Navigation("DcProcess");
                });

            modelBuilder.Entity("Foxoft.Models.TrInvoiceLine", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrency", "DcCurrency")
                        .WithMany("TrInvoiceLines")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.TrInvoiceHeader", "TrInvoiceHeader")
                        .WithMany("TrInvoiceLines")
                        .HasForeignKey("InvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithMany("TrInvoiceLines")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrency");

                    b.Navigation("DcProduct");

                    b.Navigation("TrInvoiceHeader");
                });

            modelBuilder.Entity("Foxoft.Models.TrPaymentHeader", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcCurrAcc")
                        .WithMany("TrPaymentHeaders")
                        .HasForeignKey("CurrAccCode");

                    b.HasOne("Foxoft.Models.TrInvoiceHeader", "TrInvoiceHeader")
                        .WithMany("TrPaymentHeaders")
                        .HasForeignKey("InvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Foxoft.Models.DcProcess", "DcProcess")
                        .WithMany("TrPaymentHeaders")
                        .HasForeignKey("ProcessCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcStore")
                        .WithMany("DcStoreTrPaymentHeaders")
                        .HasForeignKey("StoreCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcCurrAcc", "ToCashReg")
                        .WithMany("ToCashRegTrPaymentHeaders")
                        .HasForeignKey("ToCashRegCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DcCurrAcc");

                    b.Navigation("DcProcess");

                    b.Navigation("DcStore");

                    b.Navigation("ToCashReg");

                    b.Navigation("TrInvoiceHeader");
                });

            modelBuilder.Entity("Foxoft.Models.TrPaymentLine", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcCurrAcc")
                        .WithMany("TrPaymentLines")
                        .HasForeignKey("CashRegisterCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcCurrency", "DcCurrency")
                        .WithMany("TrPaymentLines")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.TrPaymentHeader", "TrPaymentHeader")
                        .WithMany("TrPaymentLines")
                        .HasForeignKey("PaymentHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcPaymentMethod", "DcPaymentMethod")
                        .WithMany("TrPaymentLines")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcPaymentType", "DcPaymentType")
                        .WithMany("TrPaymentLines")
                        .HasForeignKey("PaymentTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrAcc");

                    b.Navigation("DcCurrency");

                    b.Navigation("DcPaymentMethod");

                    b.Navigation("DcPaymentType");

                    b.Navigation("TrPaymentHeader");
                });

            modelBuilder.Entity("Foxoft.Models.TrPaymentMethodDiscount", b =>
                {
                    b.HasOne("Foxoft.Models.DcDiscount", "DcDiscount")
                        .WithMany("TrPaymentMethodDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcPaymentMethod", "DcPaymentMethod")
                        .WithMany("TrPaymentMethodDiscounts")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcDiscount");

                    b.Navigation("DcPaymentMethod");
                });

            modelBuilder.Entity("Foxoft.Models.TrPrice", b =>
                {
                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithMany("TrPrices")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcProduct");
                });

            modelBuilder.Entity("Foxoft.Models.TrPriceListHeader", b =>
                {
                    b.HasOne("Foxoft.Models.DcPriceType", "DcPriceListType")
                        .WithMany("TrPriceListHeaders")
                        .HasForeignKey("PriceTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcPriceListType");
                });

            modelBuilder.Entity("Foxoft.Models.TrPriceListLine", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrency", "DcCurrency")
                        .WithMany("TrPriceListLines")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.TrPriceListHeader", "TrPriceListHeader")
                        .WithMany("TrPriceListLines")
                        .HasForeignKey("PriceListHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithMany("TrPriceListLines")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrency");

                    b.Navigation("DcProduct");

                    b.Navigation("TrPriceListHeader");
                });

            modelBuilder.Entity("Foxoft.Models.TrProcessPriceType", b =>
                {
                    b.HasOne("Foxoft.Models.DcPriceType", "DcPriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcProcess", "DcProcess")
                        .WithMany()
                        .HasForeignKey("ProcessCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcPriceType");

                    b.Navigation("DcProcess");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductBarcode", b =>
                {
                    b.HasOne("Foxoft.Models.DcBarcodeType", "DcBarcodeType")
                        .WithMany("TrProductBarcodes")
                        .HasForeignKey("BarcodeTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithMany("TrProductBarcodes")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcBarcodeType");

                    b.Navigation("DcProduct");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductDiscount", b =>
                {
                    b.HasOne("Foxoft.Models.DcDiscount", "DcDiscount")
                        .WithMany("TrProductDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithMany("TrProductDiscounts")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcDiscount");

                    b.Navigation("DcProduct");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductFeature", b =>
                {
                    b.HasOne("Foxoft.Models.DcFeatureType", "DcFeatureType")
                        .WithMany("TrProductFeatures")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithMany("TrProductFeatures")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcFeature", "DcFeature")
                        .WithMany("TrProductFeatures")
                        .HasForeignKey("FeatureCode", "FeatureTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcFeature");

                    b.Navigation("DcFeatureType");

                    b.Navigation("DcProduct");
                });

            modelBuilder.Entity("Foxoft.Models.TrProductHierarchy", b =>
                {
                    b.HasOne("Foxoft.Models.DcHierarchy", "DcHierarchy")
                        .WithMany("TrProductHierarchies")
                        .HasForeignKey("HierarchyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcProduct", "DcProduct")
                        .WithMany("TrProductHierarchies")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcHierarchy");

                    b.Navigation("DcProduct");
                });

            modelBuilder.Entity("Foxoft.Models.TrReportSubQuery", b =>
                {
                    b.HasOne("Foxoft.Models.DcReport", "DcReport")
                        .WithMany("TrReportSubQueries")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcReport");
                });

            modelBuilder.Entity("Foxoft.Models.TrReportSubQueryRelationColumn", b =>
                {
                    b.HasOne("Foxoft.Models.TrReportSubQuery", "TrReportSubQuery")
                        .WithMany("TrReportSubQueryRelationColumns")
                        .HasForeignKey("SubQueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrReportSubQuery");
                });

            modelBuilder.Entity("Foxoft.Models.TrRoleClaim", b =>
                {
                    b.HasOne("Foxoft.Models.DcClaim", "DcClaim")
                        .WithMany("TrRoleClaims")
                        .HasForeignKey("ClaimCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foxoft.Models.DcRole", "DcRole")
                        .WithMany("TrRoleClaims")
                        .HasForeignKey("RoleCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcClaim");

                    b.Navigation("DcRole");
                });

            modelBuilder.Entity("Foxoft.Models.TrSession", b =>
                {
                    b.HasOne("Foxoft.Models.DcCurrAcc", "DcCurrAcc")
                        .WithOne("TrSession")
                        .HasForeignKey("Foxoft.Models.TrSession", "CurrAccCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DcCurrAcc");
                });

            modelBuilder.Entity("Foxoft.Models.trInvoiceLineExt", b =>
                {
                    b.HasOne("Foxoft.Models.TrInvoiceLine", "TrInvoiceLine")
                        .WithOne("TrInvoiceLineExt")
                        .HasForeignKey("Foxoft.Models.trInvoiceLineExt", "InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrInvoiceLine");
                });

            modelBuilder.Entity("Foxoft.Models.DcBarcodeType", b =>
                {
                    b.Navigation("TrProductBarcodes");
                });

            modelBuilder.Entity("Foxoft.Models.DcClaim", b =>
                {
                    b.Navigation("TrClaimReports");

                    b.Navigation("TrRoleClaims");
                });

            modelBuilder.Entity("Foxoft.Models.DcCurrAcc", b =>
                {
                    b.Navigation("DcPaymentMethods");

                    b.Navigation("DcStoreTrPaymentHeaders");

                    b.Navigation("SettingStores");

                    b.Navigation("ToCashRegTrPaymentHeaders");

                    b.Navigation("TrCurrAccRole");

                    b.Navigation("TrInvoiceHeaders");

                    b.Navigation("TrPaymentHeaders");

                    b.Navigation("TrPaymentLines");

                    b.Navigation("TrSession")
                        .IsRequired();
                });

            modelBuilder.Entity("Foxoft.Models.DcCurrAccType", b =>
                {
                    b.Navigation("DcCurrAccs");
                });

            modelBuilder.Entity("Foxoft.Models.DcCurrency", b =>
                {
                    b.Navigation("AppSetting")
                        .IsRequired();

                    b.Navigation("DcProcesses");

                    b.Navigation("TrInvoiceLines");

                    b.Navigation("TrPaymentLines");

                    b.Navigation("TrPriceListLines");
                });

            modelBuilder.Entity("Foxoft.Models.DcDiscount", b =>
                {
                    b.Navigation("TrPaymentMethodDiscounts");

                    b.Navigation("TrProductDiscounts");
                });

            modelBuilder.Entity("Foxoft.Models.DcFeature", b =>
                {
                    b.Navigation("TrProductFeatures");
                });

            modelBuilder.Entity("Foxoft.Models.DcFeatureType", b =>
                {
                    b.Navigation("TrHierarchyFeatureTypes");

                    b.Navigation("TrProductFeatures");
                });

            modelBuilder.Entity("Foxoft.Models.DcForm", b =>
                {
                    b.Navigation("TrFormReports");
                });

            modelBuilder.Entity("Foxoft.Models.DcHierarchy", b =>
                {
                    b.Navigation("DcProducts");

                    b.Navigation("TrHierarchyFeatureTypes");

                    b.Navigation("TrProductHierarchies");
                });

            modelBuilder.Entity("Foxoft.Models.DcPaymentMethod", b =>
                {
                    b.Navigation("TrPaymentLines");

                    b.Navigation("TrPaymentMethodDiscounts");
                });

            modelBuilder.Entity("Foxoft.Models.DcPaymentType", b =>
                {
                    b.Navigation("DcCurrAccs");

                    b.Navigation("DcPaymentMethods");

                    b.Navigation("TrPaymentLines");
                });

            modelBuilder.Entity("Foxoft.Models.DcPriceType", b =>
                {
                    b.Navigation("TrPriceListHeaders");
                });

            modelBuilder.Entity("Foxoft.Models.DcProcess", b =>
                {
                    b.Navigation("TrInvoiceHeaders");

                    b.Navigation("TrPaymentHeaders");
                });

            modelBuilder.Entity("Foxoft.Models.DcProduct", b =>
                {
                    b.Navigation("SiteProduct")
                        .IsRequired();

                    b.Navigation("TrInvoiceLines");

                    b.Navigation("TrPriceListLines");

                    b.Navigation("TrPrices");

                    b.Navigation("TrProductBarcodes");

                    b.Navigation("TrProductDiscounts");

                    b.Navigation("TrProductFeatures");

                    b.Navigation("TrProductHierarchies");
                });

            modelBuilder.Entity("Foxoft.Models.DcProductType", b =>
                {
                    b.Navigation("DcProducts");
                });

            modelBuilder.Entity("Foxoft.Models.DcReport", b =>
                {
                    b.Navigation("DcReportVariables");

                    b.Navigation("TrClaimReports");

                    b.Navigation("TrFormReports");

                    b.Navigation("TrReportSubQueries");
                });

            modelBuilder.Entity("Foxoft.Models.DcReportType", b =>
                {
                    b.Navigation("DcReports");
                });

            modelBuilder.Entity("Foxoft.Models.DcReportVariableType", b =>
                {
                    b.Navigation("DcReportVariables");
                });

            modelBuilder.Entity("Foxoft.Models.DcRole", b =>
                {
                    b.Navigation("TrCurrAccRoles");

                    b.Navigation("TrRoleClaims");
                });

            modelBuilder.Entity("Foxoft.Models.TrInvoiceHeader", b =>
                {
                    b.Navigation("TrInvoiceLines");

                    b.Navigation("TrPaymentHeaders");
                });

            modelBuilder.Entity("Foxoft.Models.TrInvoiceLine", b =>
                {
                    b.Navigation("TrInvoiceLineExt")
                        .IsRequired();
                });

            modelBuilder.Entity("Foxoft.Models.TrPaymentHeader", b =>
                {
                    b.Navigation("TrPaymentLines");
                });

            modelBuilder.Entity("Foxoft.Models.TrPriceListHeader", b =>
                {
                    b.Navigation("TrPriceListLines");
                });

            modelBuilder.Entity("Foxoft.Models.TrReportSubQuery", b =>
                {
                    b.Navigation("TrReportSubQueryRelationColumns");
                });

            modelBuilder.Entity("Foxoft.Models.dcClaimType", b =>
                {
                    b.Navigation("DcClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
